rule "ThermostatBR-Power"
when
  Item DaikinACUnitBR_Power changed or
  Item DaikinACUnitBR_Mode changed
then
  logInfo("Thermostat Zal", "openHAB Power. Info. Status: " + DaikinACUnitBR_Power.state.toString);
  logInfo("Thermostat Zal", "openHAB Power. Info. Mode openHAB: " + DaikinACUnitBR_Mode.state.toString);
  logInfo("Thermostat Zal", "openHAB Power. Info. Mode HomeKit: " + ThermostatHeatingCoolingModeBR.state.toString);
  
  if (DaikinACUnitBR_Power.state.toString == "ON") {
    if (DaikinACUnitBR_Mode.state.toString == "AUTO") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "Auto") {
        ThermostatHeatingCoolingModeBR.sendCommand("Auto");
        logInfo("Thermostat Zal", "openHAB Power. Set mode HomeKit: Auto");
      }
    }
      
    if (DaikinACUnitBR_Mode.state.toString == "COLD") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "CoolOn") {
        ThermostatHeatingCoolingModeBR.sendCommand("CoolOn");
        logInfo("Thermostat Zal", "openHAB Power. Set mode HomeKit: CoolOn");
      }
    }
   
    if (DaikinACUnitBR_Mode.state.toString == "HEAT") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "HeatOn") {
        ThermostatHeatingCoolingModeBR.sendCommand("HeatOn");
        logInfo("Thermostat Zal", "openHAB Power. Set mode HomeKit: HeatOn");
      }
    }
   
    if (DaikinACUnitBR_Mode.state.toString == "DEHUMIDIFIER") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "Auto") {
        ThermostatHeatingCoolingModeBR.sendCommand("Auto");
        logInfo("Thermostat Zal", "openHAB Power. Set mode HomeKit: Auto");
      }
    }
      
    if (DaikinACUnitBR_Mode.state.toString == "FAN") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "Auto") {
        ThermostatHeatingCoolingModeBR.sendCommand("Auto");
        logInfo("Thermostat Zal", "openHAB Power. Set mode HomeKit: Auto");
      }
    }
  }
    
  if (DaikinACUnitBR_Power.state.toString == "OFF") {
    if (ThermostatHeatingCoolingModeBR.state.toString != "OFF") { 
      ThermostatHeatingCoolingModeBR.sendCommand("Off");
      logInfo("Thermostat Zal", "openHAB Power. Set mode HomeKit: Off");
    }
  }
end

rule "ThermostatBR-AppleMode"
when
  Item ThermostatHeatingCoolingModeBR changed 
then
  logInfo("Thermostat Zal", "Apple change mode. Info. Status: " + ThermostatHeatingCoolingModeBR.state.toString);
  logInfo("Thermostat Zal", "Apple change mode. Info. Mode power openHAB: " + DaikinACUnitBR_Power.state.toString);
  logInfo("Thermostat Zal", "Apple change mode. Info. Mode openHAB: " + DaikinACUnitBR_Mode.state.toString);
  
  if (ThermostatHeatingCoolingModeBR.state.toString == "Off") {
    ThermostatHeatingCoolingCurModeBR.sendCommand("Off");
    if (DaikinACUnitBR_Power.state.toString != "OFF") {
      DaikinACUnitBR_Power.sendCommand("OFF");
      logInfo("Thermostat Zal", "Apple change mode. Set power openHAB: OFF");
    }
  }
  
  if (ThermostatHeatingCoolingModeBR.state.toString == "Auto") {
    ThermostatHeatingCoolingCurModeBR.sendCommand("CoolOn");
    if (DaikinACUnitBR_Power.state.toString != "ON") {
      DaikinACUnitBR_Power.sendCommand("ON");
      logInfo("Thermostat Zal", "Apple change mode. Set power openHAB: ON");
    }
    if (DaikinACUnitBR_Mode.state.toString != "AUTO" && DaikinACUnitBR_Mode.state.toString != "DEHUMIDIFIER" && DaikinACUnitBR_Mode.state.toString != "FAN") {
      DaikinACUnitBR_Mode.sendCommand("AUTO");
      logInfo("Thermostat Zal", "Apple change mode. Set mode openHAB: AUTO");
    }
  }
    
  if (ThermostatHeatingCoolingModeBR.state.toString == "HeatOn") {
    ThermostatHeatingCoolingCurModeBR.sendCommand("HeatOn");
    if (DaikinACUnitBR_Power.state.toString != "ON") {
      DaikinACUnitBR_Power.sendCommand("ON");
      logInfo("Thermostat Zal", "Apple change mode. Set power openHAB: ON");
    }
    if (DaikinACUnitBR_Mode.state.toString != "HEAT") {
      DaikinACUnitBR_Mode.sendCommand("HEAT");
      logInfo("Thermostat Zal", "Apple change mode. Set mode openHAB: HEAT");
    }
  }
  
  if (ThermostatHeatingCoolingModeBR.state.toString == "CoolOn") {
    ThermostatHeatingCoolingCurModeBR.sendCommand("CoolOn");
    if (DaikinACUnitBR_Power.state.toString != "ON") {
      DaikinACUnitBR_Power.sendCommand("ON");
      logInfo("Thermostat Zal", "Apple change mode. Set power openHAB: ON");
    }
    if (DaikinACUnitBR_Mode.state.toString != "COLD") {
      DaikinACUnitBR_Mode.sendCommand("COLD");
      logInfo("Thermostat Zal", "Apple change mode. Set mode openHAB: COLD");
    }
  }
end

rule "ThermostatBR-InTemp"
when
    Item DaikinACUnitBR_IndoorTemperatureF changed 
then
  logInfo("Thermostat Zal", "openHAB set temp in room. Info. Temp: " + DaikinACUnitBR_IndoorTemperatureF.state.toString);
  ThermostatCurrentTempBR.sendCommand(DaikinACUnitBR_IndoorTemperatureF.state.toString);
end

rule "ThermostatBR-Temp"
when
  Item DaikinACUnitBR_SetPoint changed 
then
  logInfo("Thermostat Zal", "openHAB set temp. Info. Temp: " + DaikinACUnitBR_SetPoint.state.toString);
  logInfo("Thermostat Zal", "openHAB set temp. Info. Apple Temp: " + ThermostatTargetTemperatureBR.state.toString);
  
  if (DaikinACUnitBR_SetPoint.state != ThermostatTargetTemperatureBR.state) {
    ThermostatTargetTemperatureBR.sendCommand(DaikinACUnitBR_SetPoint.state.toString);
    logInfo("Thermostat Zal", "openHAB set temp. New Apple Temp: " + DaikinACUnitBR_SetPoint.state.toString);
  }
end

rule "ThermostatBR-AppleTemp"
when
  Item ThermostatTargetTemperatureBR changed 
then
  logInfo("Thermostat Zal", "Apple set temp. Info. Temp: " + ThermostatTargetTemperatureBR.state.toString);
  logInfo("Thermostat Zal", "Apple set temp. Info. openHAB Temp: " + DaikinACUnitBR_SetPoint.state.toString);

  if (ThermostatTargetTemperatureBR.state != DaikinACUnitBR_SetPoint.state) {
    DaikinACUnitBR_SetPoint.sendCommand(ThermostatTargetTemperatureBR.state.toString);
    logInfo("Thermostat Zal", "Apple set temp. New openHAB Temp: " + ThermostatTargetTemperatureBR.state.toString);
  }
end

rule "ThermostatBR-Start"
when
  System started
then
  logInfo("Thermostat Zal", "Boot set params. Info. Status openHAB: " + DaikinACUnitBR_Power.state.toString);
  logInfo("Thermostat Zal", "Boot set params. Info. Mode openHAB: " + DaikinACUnitBR_Mode.state.toString);
  logInfo("Thermostat Zal", "Boot set params. Info. Set Temp openHAB: " + DaikinACUnitBR_SetPoint.state.toString);
  logInfo("Thermostat Zal", "Boot set params. Info. Inroom Temp openHAB: " + DaikinACUnitBR_IndoorTemperatureF.state.toString);
  
  if (DaikinACUnitBR_Power.state.toString == "ON") {
    if (DaikinACUnitBR_Mode.state.toString == "AUTO") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "Auto") {
        ThermostatHeatingCoolingModeBR.sendCommand("Auto");
        logInfo("Thermostat Zal", "Boot set params. Set mode HomeKit: Auto");
      }
    }
      
    if (DaikinACUnitBR_Mode.state.toString == "COLD") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "CoolOn") {
        ThermostatHeatingCoolingModeBR.sendCommand("CoolOn");
        logInfo("Thermostat Zal", "Boot set params. Set mode HomeKit: CoolOn");
      }
    }
   
    if (DaikinACUnitBR_Mode.state.toString == "HEAT") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "HeatOn") {
        ThermostatHeatingCoolingModeBR.sendCommand("HeatOn");
        logInfo("Thermostat Zal", "Boot set params. Set mode HomeKit: HeatOn");
      }
    }
   
    if (DaikinACUnitBR_Mode.state.toString == "DEHUMIDIFIER") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "Auto") {
        ThermostatHeatingCoolingModeBR.sendCommand("Auto");
        logInfo("Thermostat Zal", "Boot set params. Set mode HomeKit: Auto");
      }
    }
      
    if (DaikinACUnitBR_Mode.state.toString == "FAN") {
      if (ThermostatHeatingCoolingModeBR.state.toString != "Auto") {
        ThermostatHeatingCoolingModeBR.sendCommand("Auto");
        logInfo("Thermostat Zal", "Boot set params. Set mode HomeKit: Auto");
      }
    }
  }
    
  if (DaikinACUnitBR_Power.state.toString == "OFF") {
    if (ThermostatHeatingCoolingModeBR.state.toString != "OFF") { 
      ThermostatHeatingCoolingModeBR.sendCommand("Off");
      logInfo("Thermostat Zal", "Boot set params. Set mode HomeKit: Off");
    }
  }
  
  ThermostatCurrentTempBR.sendCommand(DaikinACUnitBR_IndoorTemperatureF.state.toString);
  
  if (DaikinACUnitBR_SetPoint.state != ThermostatTargetTemperatureBR.state) {
    ThermostatTargetTemperatureBR.sendCommand(DaikinACUnitBR_SetPoint.state.toString);
    logInfo("Thermostat Zal", "Boot set params. New Apple Temp: " + DaikinACUnitBR_SetPoint.state.toString);
  }
end